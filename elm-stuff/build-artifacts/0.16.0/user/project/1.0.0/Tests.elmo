Elm.Tests = Elm.Tests || {};
Elm.Tests.make = function (_elm) {
   "use strict";
   _elm.Tests = _elm.Tests || {};
   if (_elm.Tests.values) return _elm.Tests.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var all = A2($ElmTest.suite,
   "A Test Suite",
   _U.list([A2($ElmTest.test,"Addition",A2($ElmTest.assertEqual,3 + 7,10))
           ,A2($ElmTest.test,"String.left",A2($ElmTest.assertEqual,"a",A2($String.left,1,"abcdefg")))
           ,A2($ElmTest.test,"This test should pass",$ElmTest.assert(true))]));
   var place = F4(function (board,marker,x_coord,y_coord) {    return _U.list([_U.list([]),_U.list([" ","O"]),_U.list([])]);});
   var board = _U.list([_U.list([]),_U.list([]),_U.list([])]);
   var noughtsAndCrossesTest = A2($ElmTest.suite,
   "Noughts and crosses",
   _U.list([A2($ElmTest.test,
           "Place a naught in the middle space",
           A2($ElmTest.assertEqual,_U.list([_U.list([]),_U.list([" ","O"]),_U.list([])]),A4(place,board,"O",1,1)))
           ,A2($ElmTest.test,
           "Place a naught in the top right space",
           A2($ElmTest.assertEqual,_U.list([_U.list([" "," ","O"]),_U.list([]),_U.list([])]),A4(place,board,"O",0,2)))]));
   return _elm.Tests.values = {_op: _op,board: board,place: place,noughtsAndCrossesTest: noughtsAndCrossesTest,all: all};
};