Elm.Tests = Elm.Tests || {};
Elm.Tests.make = function (_elm) {
   "use strict";
   _elm.Tests = _elm.Tests || {};
   if (_elm.Tests.values) return _elm.Tests.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $Game = Elm.Game.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var testExamples = A2($ElmTest.suite,
   "An Example Test Suite Where All Tests Pass",
   _U.list([A2($ElmTest.test,"Addition",A2($ElmTest.assertEqual,3 + 7,10))
           ,A2($ElmTest.test,"String.left",A2($ElmTest.assertEqual,"a",A2($String.left,1,"abcdefg")))
           ,A2($ElmTest.test,"This test should pass",$ElmTest.assert(true))]));
   var all = A2($ElmTest.suite,
   "Tic Tac Toe",
   _U.list([A2($ElmTest.test,
   "Begin with an empty 3x3 board",
   A2($ElmTest.assertEqual,
   _U.list([_U.list([_U.list([]),_U.list([]),_U.list([])]),_U.list([_U.list([]),_U.list([]),_U.list([])]),_U.list([_U.list([]),_U.list([]),_U.list([])])]),
   $Game.board))]));
   return _elm.Tests.values = {_op: _op,all: all,testExamples: testExamples};
};